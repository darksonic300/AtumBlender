plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.neoforged.gradle' version '[6.0.13, 6.2)'
    id 'io.github.0ffz.github-packages' version '[1,2)'
    id 'org.spongepowered.mixin' version '[0.7,0.8)'
}

version = "${minecraft_version}-${mod_version}-neoforge"
group = 'teamrazor.aeroblender'

archivesBaseName = project.mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'official', version: '1.20.1'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'aeroblender'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile',"${buildDir}/createSrgToMcp/output.srg"

            mods {
                aeroblender {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'aeroblender'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile',"${buildDir}/createSrgToMcp/output.srg"

            mods {
                aeroblender {
                    source sourceSets.main
                }
            }
        }


        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'aeroblender'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile',"${buildDir}/createSrgToMcp/output.srg"

            mods {
                aeroblender {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'aeroblender', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile',"${buildDir}/createSrgToMcp/output.srg"

            mods {
                aeroblender {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven githubPackage.invoke("The-Aether-Team/The-Aether")
    maven { url = "https://maven.theillusivec4.top/" }
    maven githubPackage.invoke("The-Aether-Team/Nitrogen")
    maven githubPackage.invoke("The-Aether-Team/Cumulus")
    maven { url = 'https://maven.minecraftforge.net/' }
}

dependencies {
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    minecraft "net.neoforged:forge:${project.minecraft_version}-${project.neoforge_version}"

    implementation fg.deobf("com.github.glitchfiend:TerraBlender-forge:${project.terrablender_version}")

    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}:api")

    implementation fg.deobf("com.aetherteam.aether:aether:${project.aether_version}")

    implementation fg.deobf("com.aetherteam.nitrogen:nitrogen_internals:${project.nitrogen_version}")
    implementation fg.deobf("com.aetherteam.cumulus:cumulus_menus:${project.cumulus_version}")
}

mixin {
    config "aeroblender.mixins.json"
    add sourceSets.main, "aeroblender.refmap.json"
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title"     : "aeroblender",
                "Specification-Vendor"    : "razordevs",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "razordevs",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}


jar.finalizedBy('reobfJar')


publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}